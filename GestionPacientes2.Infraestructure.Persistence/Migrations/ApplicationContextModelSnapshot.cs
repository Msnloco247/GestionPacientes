// <auto-generated />
using System;
using GestionPacientes2.Infrastructure.Persitence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionPacientes2.Infrastructure.Persitence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Identification")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.Pacient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("Date");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Identification")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Smooker")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pacients", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.PacientDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDay")
                        .HasColumnType("Date");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PacientDate", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestResults", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Doctor_Pacient", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "PacientId");

                    b.HasIndex("PacientId");

                    b.ToTable("Doctor_Pacient");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Doctor_PacientDate", b =>
                {
                    b.Property<int>("PacientDateId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("PacientDateId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PacientDateId")
                        .IsUnique();

                    b.ToTable("Doctor_PacientDate");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.LabTest_Pacient", b =>
                {
                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.HasKey("PacientId", "LabTestId");

                    b.HasIndex("LabTestId");

                    b.ToTable("LabTest_Pacient");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Pacient_TestResult", b =>
                {
                    b.Property<int>("PacientId")
                        .HasColumnType("int");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.HasKey("PacientId", "TestResultId");

                    b.HasIndex("TestResultId")
                        .IsUnique();

                    b.ToTable("Pacient_TestResult");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Doctor_Pacient", b =>
                {
                    b.HasOne("GestionPacientes2.Core.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Doctor_Pacients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionPacientes2.Core.Domain.Entities.Pacient", "Pacient")
                        .WithMany()
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Doctor_PacientDate", b =>
                {
                    b.HasOne("GestionPacientes2.Core.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionPacientes2.Core.Domain.Entities.PacientDate", "PacientDate")
                        .WithOne("Doctor_PacientDate")
                        .HasForeignKey("GestionPacientes2.Core.Domain.Entities.joins.Doctor_PacientDate", "PacientDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("PacientDate");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.LabTest_Pacient", b =>
                {
                    b.HasOne("GestionPacientes2.Core.Domain.Entities.LabTest", "LabTest")
                        .WithMany()
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionPacientes2.Core.Domain.Entities.Pacient", "Pacient")
                        .WithMany("LabTest_Pacients")
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.joins.Pacient_TestResult", b =>
                {
                    b.HasOne("GestionPacientes2.Core.Domain.Entities.Pacient", "Pacient")
                        .WithMany()
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionPacientes2.Core.Domain.Entities.TestResult", "TestResult")
                        .WithOne("Pacient_TestResult")
                        .HasForeignKey("GestionPacientes2.Core.Domain.Entities.joins.Pacient_TestResult", "TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacient");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Doctor_Pacients");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.Pacient", b =>
                {
                    b.Navigation("LabTest_Pacients");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.PacientDate", b =>
                {
                    b.Navigation("Doctor_PacientDate");
                });

            modelBuilder.Entity("GestionPacientes2.Core.Domain.Entities.TestResult", b =>
                {
                    b.Navigation("Pacient_TestResult");
                });
#pragma warning restore 612, 618
        }
    }
}
